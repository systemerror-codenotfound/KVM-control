esphome:
  name: kvm-esp8266
  friendly_name: KVM-ESP8266
  includes:
   - uart_read_line_sensor.h
esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "EDITED"

ota:
  password: "EDITED"

uart:
  id: uart_bus
  tx_pin:
    number: 4
    inverted: true
  rx_pin:
    number: 5
    inverted: true
  baud_rate: 19200
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      bytes: 10
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

button:
  - platform: uart
    name: "Monitor 1"
    data: 'G01gA'
    id: uart_monitor_1
  - platform: uart
    name: "Monitor 2"
    data: 'G02gA'
    id: uart_monitor_2
  - platform: uart
    name: "Monitor 3"
    data: 'G03gA'
    id: uart_monitor_3
  - platform: uart
    name: "Monitor 4"
    data: 'G04gA'
    id: uart_monitor_4

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO14
      mode: input
    name: "Bypass"
    id: Bypass
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        - if:
            condition:
              text_sensor.state:
                id: uart_readline
                state: 'G01gA'
            then:
              - uart.write: G02gA
        - if:
            condition:
              text_sensor.state:
                id: uart_readline
                state: 'G02gA'
            then:
              - uart.write: G01gA
              

text_sensor:
- platform: custom
  lambda: |-
    auto my_custom_sensor = new UartReadLineSensor(id(uart_bus));
    App.register_component(my_custom_sensor);
    return {my_custom_sensor};
  text_sensors:
    id: "uart_readline"
    name: "UART"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: EDITED
    gateway: EDITED
    subnet: EDITED
    dns1: EDITED


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Kvm-Esp8266 Fallback Hotspot"
    password: "EDITED"

captive_portal:
    